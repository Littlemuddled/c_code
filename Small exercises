#include<stdio.h>
#include<string.h>
#include<assert.h>
#include <stdlib.h>
#include <time.h> 

//int search(int* nums, int numsSize, int target)
//{
//	int left = 0;
//	int right = numsSize - 1;
//	while (left < right)
//	{
//		int mid = (left + right) / 2;
//		if (nums[mid] < target)
//		{
//			left = mid + 1;
//		}
//		else if (nums[mid] > target)
//		{
//			right = mid - 1;
//		}
//		else
//			return mid;
//	}
//	return -1;
//}

//int main()
//{
//	char arr1[] = "ababbba abbabbabbabbaacc";
//	char arr2[] = "abba";
//	char* p = strstr(arr1, arr2);
//	printf("%s\n", p);
//
//
//	//一个字符串中找另一个字符串的子串
//	char arr7[] = "abbbcd";
//	char arr8[] = "bbc";
//	char* pt = strstr(arr7, arr8);
//	//char* pt = my_strstr(arr7, arr8);//自己实现strstr函数
//	printf("%s\n", pt);
//
//	return 0;
//}

//void reverse(char* str, int n)
//{
//	assert(str);
//	int left = 0;
//	int right = n - 1;
//	char tmp = 0;
//	while (left < right)
//	{
//		tmp = *(str + left);
//		*(str + left) = *(str + right);
//		*(str + right) = tmp;
//		left++;
//		right--;
//	}
//
//}
//int main()
//{
//	char arr[20] = { 0 };
//	int len = 0;
//	printf("输入字符串：");
//	gets(arr);
//	len = strlen(arr);
//	reverse(arr, len);
//	printf("逆序后的字符串：");
//	puts(arr);
//	return 0;
//}


//学生的记录由学号和成绩组成，N名学生的数据已在主函数中放入结构体数组s中，
//请编写函数fun，它的功能是：按分数的高低排列学生的记录，高分在前。
//#define N 16
//typedef struct
//{
//    char num[10];
//    int s;
//} STREC;
//void fun(STREC a[])
//{
//    /**********  Begin  **********/
//    int i = 0;
//    int j = 0;
//    int k = 0;
//    int t = 0;
//    char h = 0;
//    for (i = 0; i < N - 1; i++)//遍历趟数
//    {
//        for (j = 0; j < N - 1 - i; j++)//比较次数
//        {
//            if (a[j].s < a[j + 1].s)
//            {
//				  //方法一
//                STREC tmp = a[j];
//                a[j] = a[j + 1];
//                a[j + 1] = tmp;
//
//                //方法二
//                ////交换成绩（int s）
//                //t = a[j].s; 
//                //a[j].s = a[j+1].s; 
//                //a[j+1].s = t;
//
//                ////换学号（num[10]）
//                //for (k = 0; k < 10; k++)
//                //{
//                //    h = a[j].num[k];
//                //    a[j].num[k] = a[j + 1].num[k];
//                //    a[j + 1].num[k] = h;
//                //}
//            }
//        }
//    }
//
//
//    /**********   End  ***********/
//}
//int main()
//{
//    STREC s[N] = { {"GA05",85},{"GA03",76},{"GA02",69},{"GA04",85},{"GA01",91},{"GA07",72},{"GA08",64},{"GA06",87},
//                    {"GA015",85},{"GA013",91},{"GA012",64},{"GA014",91},{"GA011",91},{"GA017",64},{"GA018",64},{"GA016",72} };
//    fun(s);
//}




//void fun(int  a[], int  n, int* max, int* d)
//{
//	int i = 0;
//	*max = a[0];//假设数组中第一个元素最大
//	*d = 0;//开始下标为0
//	for (i = 1; i < n ;i++)
//	{
//		if (a[i] > *max)
//		{
//			*max = a[i];
//			*d = i;
//		}
//	}
//}
//int main()
//{
//	int i, x[20], max, index, n = 10;
//	srand(time(0));
//	for (i = 0; i < n; i++) 
//	{ 
//		x[i] = rand() % 50; 
//		printf("%4d", x[i]);
//	}
//	printf("\n");
//	fun(x, n, &max, &index);
//	printf("Max =%5d ,  Index =%4d\n", max, index);
//
//	return 0;
//}




//#define LEN 20
//void fun(char a[], char b[], int n)
//{
//    /**********  Begin  **********/
//    //int i = 0, j = 0;
//    //for (i = 0, j = 0; a[i] != '\0'; i++) 
//    //{ /*建立循环，在原字符串a[]中定位到指定位置*/
//    //    if (i != n) 
//    //    { /*在以上循环中，当没有到达指定位置时，将a[]当前位置的字符复制到数组b[]中*/
//    //        b[j] = a[i];
//    //        j++;
//    //    }
//    //}
//    int i = 0;
//    int j = 0;
//    for (i = 0; a[i] != '\0'; i++)
//    {
//        if (i != n)
//        {
//            b[j] = a[i];
//            j++;
//        }
//    }
//
//
//    /**********   End  ***********/
//}
//int main()
//{
//    char str1[LEN] = { 0 };
//    char str2[LEN] = { 0 };
//    int n = 0;
//    printf("Enter the string:\n");
//    gets(str1);
//    printf("Enter the position of the string deleted:");
//    scanf("%d", &n);
//    fun(str1, str2, n);
//    printf("The new string is: %s\n", str2);
//    return 0;
//}



//int fun(int score[], int m, int below[])
//{
//    /**********  Begin  **********/
//    int i = 0;
//    int j = 0;
//    int count = 0;
//    int total = 0;
//    float average = 0;
//
//    for (i = 0; i < m; i++)
//    {
//        total += score[i];
//    }
//    average = total / m;
//    for (i = 0; i < m; i++)
//    {
//        if (score[i] < average)
//        {
//            below[j] = score[i];
//            j++;
//            count++;
//        }
//    }
//    return count;
//    /**********   End  ***********/
//}
//int main()
//{
//    int i, n, below[9];
//    int score[9] = { 10,20,30,40,50,60,70,80,90 };
//    n = fun(score, 9, below);
//    printf("\nBelow the average score are:");
//    for (i = 0; i < n; i++) 
//        printf("%d ", below[i]);
//    return 0;
//}



//float fun(float* a, int n)
//{
//    /**********  Begin  **********/
//    int i = 0;
//    float average = 0;
//    float total = 0;
//    for (i = 0; i < n; i++)
//    {
//        total += *(a + i);
//    }
//    average = total / n;
//    return average;
//    /**********   End  ***********/
//}
//main()
//{
//    float score[30] = { 90.5,72,80,61.5,55 };
//    float aver;
//    aver = fun(score, 5);
//    printf("\nAverage score is: %5.2f\n", aver);
//}


//将ss所指字符串中所有下标为奇数位置上的字母转换成大写（若该位置上不是字母，则不转换）。
//void fun(char* ss)
//{
////    /**********  Begin  **********/
////    int i, n = 0;
////    char* p;
////    p = ss;
////    while (*p++ != '\0')
////        n++;
////    for (i = 1; i < n; i += 2)
////        if (ss[i] >= 'a' && ss[i] <= 'z')
////            ss[i] = ss[i] - 'a' + 'A';
//
//    int i = 0;
//    int len = strlen(ss);
//    for (i = 1; i < len; i += 2)
//    {
//        if (*(ss + i) <= 'z' && *(ss + i) >= 'a')
//        {
//            *(ss + i) -= ' ';//空格符对应的ascll为32
//        }
//    }
//    /**********   End  ***********/
//}
//int main()
//{
//    char tt[81];
//    printf("\nPlease enter an string within 80 characters:\n"); 
//    gets(tt);
//    printf("\n\nAfter changing,the string\n  \"%s\"", tt);
//    fun(tt);
//    printf("\nbecomes\n  \"%s\"\n", tt);
//
////    char a = 'b';
////    a = a - ' ';
////    //a = a - 'a' + 'A';
////    printf("%c\n", a);
//
//    return 0;
//}



//----------------------------------------------------------------------------------

//用函数将第2个串连接到第1个串之后，不允许使用strcat函数。
//void len_cat(char c1[], char c2[])
//{
//	/*********Begin**********/
//	int i = 0;
//	int j = 0;
//	int len = strlen(c1);
//	for (i = 0; c1[i] != '\0'; i++)
//	{
//		;
//	}
//	for (j = 0; c2[j] != '\0'; j++)
//	{
//		c1[i + j] = c2[j];
//	}
//	c1[i + j] = c2[j];
//
//	/**********  End  **********/
//}
//
//main()
//{
//	char s1[80], s2[40];
//	gets(s1); 
//	gets(s2);
//	len_cat(s1, s2);
//	printf("string is: %s\n", s1);
//}



//将s所指字符串中下标为偶数同时ASCII值也为偶数的字符删除，s中剩余的字符形成一个新串放在t所指的数组中。
//void fun(char* s, char t[])
//{
//    /**********  Begin  **********/
// /*   int i, slenth, n = 0;
//    slenth = strlen(s);
//    for (i = 0; i < slenth; i++) 
//    {
//        if (s[i] % 2 == 0 && i % 2 == 0);
//        else
//            t[n++] = s[i];
//    }
//    t[n] = '\0';*/
//
// 
//    int i = 0;
//    int n = 0;
//    int len = strlen(s);
//    for (i = 0; i < len; i++)
//    {
//        if (s[i] % 2 == 0 && i % 2 == 0)
//        {
//            ;
//        }
//        else
//            t[n++] = s[i];
//    }
//    t[n] = '\0';
//    /**********   End  ***********/
//}
//int main()
//{
//    char s[100], t[100];
//    printf("\nPlease enter string S:"); 
//    scanf("%s", s);
//    fun(s, t);
//    printf("\nThe result is:%s\n", t);
//
//    return 0;
//}



//编写程序，实现矩阵（3行3列）的转置（即行列互换）。   
//void fun(int array[3][3])
//{
//	/*********Begin**********/
//    int i = 0;
//    int j = 0;
//    int t = 0;
//    for (i = 0; i < 3; i++)
//    {
//        for (j = 0; j < i; j++)
//        {
//            t = array[i][j];
//            array[i][j] = array[j][i];
//            array[j][i] = t;
//        }
//    }
//	/**********  End  **********/
//}
//int main()
//{
//    int i, j;
//    int array[3][3] = { {100,200,300},
//                        {400,500,600},
//                        {700,800,900} };
//    for (i = 0; i < 3; i++)
//    {
//        for (j = 0; j < 3; j++)
//            printf("%7d", array[i][j]);
//        printf("\n");
//    }
//    fun(array);
//    printf("Converted array:\n");
//    for (i = 0; i < 3; i++)
//    {
//        for (j = 0; j < 3; j++)
//            printf("%7d", array[i][j]);
//        printf("\n");
//    }
//    return 0;
//}


//函数实现字符串的复制，不用strcpy
//void copy(char str1[], char str2[])
//{
//	/*********Begin**********/
//	int i = 0;
//	for (i = 0 ; str1[i] != '\0'; i++)
//	{
//		str2[i] = str1[i];
//	}
//	//str2[i] = '\0';
//	str2[i] = str1[i];
//	/**********  End  **********/
//}
//int main()
//{
//	char c1[40], c2[40];
//	gets(c1);
//	copy(c1, c2);
//	puts(c2);
//	return 0;
//}



//int main()
//{
//	char arr[10] = "abcdef";
//	char arr1[] = "mnb";
//	char* p = strcpy(arr, arr1);
//	printf("%s\n", p);
//	return 0;
//}



//把低于平均分的学生数据放在b所指的数组中，低于平均分的学生人数通过形参n传回，平均分通过函数值返回。
//#define N 8
//typedef struct
//{
//    char num[10];
//    double s;
//} STREC;
//double fun(STREC* a, STREC* b, int* n)
//{
//    /**********  Begin  **********/
//    int i = 0;
//    double total = 0;
//    double ave = 0;
//    *n = 0;
//    //计算总数
//    for (i = 0; i < N; i++)
//    {
//        total += a[i].s;
//    }
//    //平均值
//    ave = total / N;
//    for (i = 0; i < N; i++) 
//    {
//        if (a[i].s < ave)
//        {
//            b[*n] = a[i];
//            *n = *n + 1;
//        }
//    }
//    return ave;
//    /**********   End  ***********/
//}
//int main()
//{
//    STREC s[N] = { {"GA05",85},{"GA03",76},{"GA02",69},{"GA04",85},{"GA01",91},{"GA07",72},{"GA08",64},{"GA06",87} };
//    STREC h[N];
//    int i, n; 
//    double ave;
//    ave = fun(s, h, &n);
//    printf("The %d student data which is lower than %7.3f:\n", n, ave);
//    for (i = 0; i < n; i++)
//        printf("%s %4.1f\n", h[i].num, h[i].s);
//    printf("\n");
//
//    return 0;
//}



//把分数最高的学生数据放在b所指的数组中，注意：分数最高的学生可能不止一个，函数返回分数最高的学生人数。
//#define N 16
//typedef struct
//{
//    char num[10];
//    int s;
//} STREC;
//int fun(STREC* a, STREC* b)
//{
//    /**********  Begin  **********/
//    int count = 0;
//    int i = 0;
//    int max = a[0].s;//假设第一个分数最高，后面的挨个与其比较
//    for (i = 1; i < N; i++)
//    {
//        if (a[i].s > max)
//        {
//            max = a[i].s;
//        }
//    }
//    for (i = 0; i < N; i++)
//    {
//        if (a[i].s == max)
//        {
//            b[count] = a[i];
//            count++;//计算分数最高的学生人数
//        }
//    }
//    return count;
//    /**********   End  ***********/
//}
//int main()
//{
//    STREC s[N] = { {"GA05",85},{"GA03",76},{"GA02",69},{"GA04",85},{"GA01",91},{"GA07",72},{"GA08",64},{"GA06",87},
//                   {"GA015",85},{"GA013",91},{"GA012",64},{"GA014",91},{"GA011",91},{"GA017",64},{"GA018",64},{"GA016",72} };
//    STREC h[N];
//    int i, n;
//    n = fun(s, h);
//    printf("The %d highest score:\n", n);
//    for (i = 0; i < n; i++)
//        printf("%s  %4d\n", h[i].num, h[i].s);
//    printf("\n");
//    return 0;
//}



//将字符串中的大写字母转换为对应的小写字母，其它字符不变。
//int main()
//{
//	void change(char str[]);
//	char str[40];
//	gets(str);
//	change(str);
//	puts(str);
//	return 0;
//}
//void change(char str[])
//{
//	/*********Begin**********/
//	int i = 0;
//	int len = strlen(str);
//	for (i = 0; i < len; i++)
//	{
//		if (str[i] <= 'Z' && str[i] >= 'A')
//		{
//			str[i] += ' ';//方法1
//			//str[i] = str[i] - 'A' + 'a';//方法2
//			//str[i] += 32;//方法3
//		}
//	}
//	/**********  End  **********/
//}



//求给定正整数n以内的素数之积。（n < 28）
//long fun(int n)
//{
//	/*********Begin**********/
//	int i = 0;
//	int j = 0;
//	long s = 1;
//	for (i = 2; i <= n; i++)
//	{
//		for (j = 2; j < i; j++)
//		{
//			if (i % j == 0)
//			{
//				break;
//			}
//		}
//		if (j == i)
//		{
//			s *= i;
//		}
//	}
//		return s;
//		/**********  End  **********/
//}
//int main()
//{
//	int  m;
//	printf("Enter m: ");
//	scanf("%d", &m);
//	printf("\nThe result is %ld\n", fun(m));
//	return 0;
//	return 0;
//}


//请编写一个函数，用来删除字符串中的所有空格。例如，输入"asd af aa z67"， 则输出为 "asdafaaz67"。
//void fun(char* str)
//{
    /**********  Begin  **********/

//    int i, j;
//    for (i = 0; *(str + i); i++)
//    {
//        if (*(str + i) == 32)
//        {
//            for (j = i + 1; *(str + j); j++)
//            {
//                *(str + j - 1) = *(str + j);
//            }
//            *(str + j - 1) = 0;
//            i = 0;
//        }
//    }

    //int i = 0;
    //int j = 0;
    //for (i = 0; str[i] != '\0'; i++)
    //{
    //    if ( ' ' == str[i])
    //    {
    //        for (j = i + 1; str[j] != '\0'; j++)
    //        {
    //            str[j - 1] = str[j];
    //        }
    //        str[j - 1] = 0;
    //        i = 0;
    //    }
    //}
    /**********   End  ***********/
//}
//int main()
//{
//    char str[81];
//    printf("Input a string:");
//    gets(str);
//    puts(str);
//    fun(str);
//    printf("*** str: %s\n", str);
//    return 0;
//}



//将所有大于1小于整数m的非素数存入xx所指数组中，非素数的个数通过k传回。
//例如，若输入：17，则应输出：9和4 6 8 9 10 12 14 15 16。
//void fun(int m, int* k, int xx[])
//{
//    /**********  Begin  **********/
//    int i = 0;
//    int j = 0;
//    *k = 0;
//    for (i = 4; i < m; i++)
//    {
//        for (j = 2; j < i; j++)
//        {
//            if (i % j == 0)
//            {
//                break;
//            }
//        }
//        if (j < i)
//        {
//            xx[*k] = i;
//            *k += 1;
//        }
//    }
//
//    /**********   End  ***********/
//}
//int main()
//{
//    int m, n, zz[100];
//    printf("\nPlease enter an integer number between 10 and 100:");
//    scanf("%d", &n);
//    fun(n, &m, zz);
//    printf("\n\nThere are %d non-prime numbers less than %d:", m, n);
//    for (n = 0; n < m; n++)
//        printf("\n %4d\n", zz[n]);
//    return 0;
//}


//将s所指字符串除了下标为偶数、同时ASCII值也为偶数的字符外，
//其余的全部删除；串中剩余字符所形成的一个新串放在t所指的数组中。
//例如，若s所指字符串中的内容为："ABCDEFG123456"，其中字符B的ASCII码值为偶数，
//但在数组中的下标为奇数，因此也应当删除；而字符2的ASCII码值为偶数，所在数组中的下标也为偶数，
//因此不应当删除，其他依此类推。最后t所指的数组中的内容应是："246"。
//void fun(char* s, char t[])
//{
//    /**********  Begin  **********/
//    int i = 0;
//    int len = strlen(s);
//    int index = 0;
//    for (i = 0; i < len; i+=2)
//    {
//        if (0 == s[i] % 2)
//        {
//            t[index] = s[i];
//            index++;
//        }
//    }
//    t[index] = '\0';
//
//    /**********   End  ***********/
//}
//int main()
//{
//    char s[100], t[100];
//    printf("\nPlease enter string S:"); 
//    scanf("%s", s);
//    fun(s, t);
//    printf("\nThe result is: %s\n", t);
//    return 0;
//}
