#include<stdio.h>
#include<string.h>
#include<assert.h>
#include <stdlib.h>
#include <time.h> 

//int search(int* nums, int numsSize, int target)
//{
//	int left = 0;
//	int right = numsSize - 1;
//	while (left < right)
//	{
//		int mid = (left + right) / 2;
//		if (nums[mid] < target)
//		{
//			left = mid + 1;
//		}
//		else if (nums[mid] > target)
//		{
//			right = mid - 1;
//		}
//		else
//			return mid;
//	}
//	return -1;
//}

//int main()
//{
//	char arr1[] = "ababbba abbabbabbabbaacc";
//	char arr2[] = "abba";
//	char* p = strstr(arr1, arr2);
//	printf("%s\n", p);
//
//
//	//一个字符串中找另一个字符串的子串
//	char arr7[] = "abbbcd";
//	char arr8[] = "bbc";
//	char* pt = strstr(arr7, arr8);
//	//char* pt = my_strstr(arr7, arr8);//自己实现strstr函数
//	printf("%s\n", pt);
//
//	return 0;
//}

//void reverse(char* str, int n)
//{
//	assert(str);
//	int left = 0;
//	int right = n - 1;
//	char tmp = 0;
//	while (left < right)
//	{
//		tmp = *(str + left);
//		*(str + left) = *(str + right);
//		*(str + right) = tmp;
//		left++;
//		right--;
//	}
//
//}
//int main()
//{
//	char arr[20] = { 0 };
//	int len = 0;
//	printf("输入字符串：");
//	gets(arr);
//	len = strlen(arr);
//	reverse(arr, len);
//	printf("逆序后的字符串：");
//	puts(arr);
//	return 0;
//}


//学生的记录由学号和成绩组成，N名学生的数据已在主函数中放入结构体数组s中，
//请编写函数fun，它的功能是：按分数的高低排列学生的记录，高分在前。
//#define N 16
//typedef struct
//{
//    char num[10];
//    int s;
//} STREC;
//void fun(STREC a[])
//{
//    /**********  Begin  **********/
//    int i = 0;
//    int j = 0;
//    int k = 0;
//    int t = 0;
//    char h = 0;
//    for (i = 0; i < N - 1; i++)//遍历趟数
//    {
//        for (j = 0; j < N - 1 - i; j++)//比较次数
//        {
//            if (a[j].s < a[j + 1].s)
//            {
//				  //方法一
//                STREC tmp = a[j];
//                a[j] = a[j + 1];
//                a[j + 1] = tmp;
//
//                //方法二
//                ////交换成绩（int s）
//                //t = a[j].s; 
//                //a[j].s = a[j+1].s; 
//                //a[j+1].s = t;
//
//                ////换学号（num[10]）
//                //for (k = 0; k < 10; k++)
//                //{
//                //    h = a[j].num[k];
//                //    a[j].num[k] = a[j + 1].num[k];
//                //    a[j + 1].num[k] = h;
//                //}
//            }
//        }
//    }
//
//
//    /**********   End  ***********/
//}
//int main()
//{
//    STREC s[N] = { {"GA05",85},{"GA03",76},{"GA02",69},{"GA04",85},{"GA01",91},{"GA07",72},{"GA08",64},{"GA06",87},
//                    {"GA015",85},{"GA013",91},{"GA012",64},{"GA014",91},{"GA011",91},{"GA017",64},{"GA018",64},{"GA016",72} };
//    fun(s);
//}




//void fun(int  a[], int  n, int* max, int* d)
//{
//	int i = 0;
//	*max = a[0];//假设数组中第一个元素最大
//	*d = 0;//开始下标为0
//	for (i = 1; i < n ;i++)
//	{
//		if (a[i] > *max)
//		{
//			*max = a[i];
//			*d = i;
//		}
//	}
//}
//int main()
//{
//	int i, x[20], max, index, n = 10;
//	srand(time(0));
//	for (i = 0; i < n; i++) 
//	{ 
//		x[i] = rand() % 50; 
//		printf("%4d", x[i]);
//	}
//	printf("\n");
//	fun(x, n, &max, &index);
//	printf("Max =%5d ,  Index =%4d\n", max, index);
//
//	return 0;
//}




//#define LEN 20
//void fun(char a[], char b[], int n)
//{
//    /**********  Begin  **********/
//    //int i = 0, j = 0;
//    //for (i = 0, j = 0; a[i] != '\0'; i++) 
//    //{ /*建立循环，在原字符串a[]中定位到指定位置*/
//    //    if (i != n) 
//    //    { /*在以上循环中，当没有到达指定位置时，将a[]当前位置的字符复制到数组b[]中*/
//    //        b[j] = a[i];
//    //        j++;
//    //    }
//    //}
//    int i = 0;
//    int j = 0;
//    for (i = 0; a[i] != '\0'; i++)
//    {
//        if (i != n)
//        {
//            b[j] = a[i];
//            j++;
//        }
//    }
//
//
//    /**********   End  ***********/
//}
//int main()
//{
//    char str1[LEN] = { 0 };
//    char str2[LEN] = { 0 };
//    int n = 0;
//    printf("Enter the string:\n");
//    gets(str1);
//    printf("Enter the position of the string deleted:");
//    scanf("%d", &n);
//    fun(str1, str2, n);
//    printf("The new string is: %s\n", str2);
//    return 0;
//}



//int fun(int score[], int m, int below[])
//{
//    /**********  Begin  **********/
//    int i = 0;
//    int j = 0;
//    int count = 0;
//    int total = 0;
//    float average = 0;
//
//    for (i = 0; i < m; i++)
//    {
//        total += score[i];
//    }
//    average = total / m;
//    for (i = 0; i < m; i++)
//    {
//        if (score[i] < average)
//        {
//            below[j] = score[i];
//            j++;
//            count++;
//        }
//    }
//    return count;
//    /**********   End  ***********/
//}
//int main()
//{
//    int i, n, below[9];
//    int score[9] = { 10,20,30,40,50,60,70,80,90 };
//    n = fun(score, 9, below);
//    printf("\nBelow the average score are:");
//    for (i = 0; i < n; i++) 
//        printf("%d ", below[i]);
//    return 0;
//}



//float fun(float* a, int n)
//{
//    /**********  Begin  **********/
//    int i = 0;
//    float average = 0;
//    float total = 0;
//    for (i = 0; i < n; i++)
//    {
//        total += *(a + i);
//    }
//    average = total / n;
//    return average;
//    /**********   End  ***********/
//}
//main()
//{
//    float score[30] = { 90.5,72,80,61.5,55 };
//    float aver;
//    aver = fun(score, 5);
//    printf("\nAverage score is: %5.2f\n", aver);
//}


//将ss所指字符串中所有下标为奇数位置上的字母转换成大写（若该位置上不是字母，则不转换）。
//void fun(char* ss)
//{
////    /**********  Begin  **********/
////    int i, n = 0;
////    char* p;
////    p = ss;
////    while (*p++ != '\0')
////        n++;
////    for (i = 1; i < n; i += 2)
////        if (ss[i] >= 'a' && ss[i] <= 'z')
////            ss[i] = ss[i] - 'a' + 'A';
//
//    int i = 0;
//    int len = strlen(ss);
//    for (i = 1; i < len; i += 2)
//    {
//        if (*(ss + i) <= 'z' && *(ss + i) >= 'a')
//        {
//            *(ss + i) -= ' ';//空格符对应的ascll为32
//        }
//    }
//    /**********   End  ***********/
//}
//int main()
//{
//    char tt[81];
//    printf("\nPlease enter an string within 80 characters:\n"); 
//    gets(tt);
//    printf("\n\nAfter changing,the string\n  \"%s\"", tt);
//    fun(tt);
//    printf("\nbecomes\n  \"%s\"\n", tt);
//
////    char a = 'b';
////    a = a - ' ';
////    //a = a - 'a' + 'A';
////    printf("%c\n", a);
//
//    return 0;
//}
